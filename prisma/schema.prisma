generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id        String   @id
  email     String   @unique(map: "Admin_email_key")
  password  String
  name      String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime
}

model document {
  id           String    @id
  pensionerId  Int
  documentType String
  fileName     String
  filePath     String
  uploadedAt   DateTime  @default(now())
  verifiedAt   DateTime?
  status       String    @default("pending")
  pensioner    pensioner @relation(fields: [pensionerId], references: [id], map: "Document_pensionerId_fkey")

  @@index([pensionerId], map: "Document_pensionerId_idx")
}

model enquiry {
  id         Int      @id @default(autoincrement())
  fullName   String
  email      String
  phone      String?
  subject    String
  message    String
  trackingId String   @unique(map: "Enquiry_trackingId_key")
  createdAt  DateTime @default(now())
}

model pensioner {
  id                     Int                  @id @default(autoincrement())
  pensionId              String               @unique(map: "Pensioner_pensionId_key")
  fullName               String
  nin                    String               @unique(map: "Pensioner_nin_key")
  dateOfBirth            DateTime
  gender                 String
  email                  String               @unique(map: "Pensioner_email_key")
  phone                  String
  residentialAddress     String
  pensionSchemeType      String
  dateOfFirstAppointment DateTime
  dateOfRetirement       DateTime
  pfNumber               String               @unique(map: "Pensioner_pfNumber_key")
  lastPromotionDate      DateTime
  currentLevel           String
  salary                 Float
  maidenName             String?
  password               String
  status                 String               @default("PENDING_VERIFICATION")
  createdAt              DateTime             @default(now())
  updatedAt              DateTime
  gratuityRate           Float?
  monthlyPension         Float?
  pensionRate            Float?
  totalGratuity          Float?
  yearsOfService         Int?
  photo                  String?
  document               document[]
  pensionerfile          pensionerfile[]
  verificationlog        verificationlog[]
  verificationreview     verificationreview[]
  biometriccredential    biometriccredential[]
}

model pensionerfile {
  id           String    @id
  pensionerId  Int
  fileType     String
  fileUrl      String
  originalName String
  publicId     String
  uploadedById Int?
  createdAt    DateTime  @default(now())
  pensioner    pensioner @relation(fields: [pensionerId], references: [id], map: "PensionerFile_pensionerId_fkey")

  @@index([pensionerId], map: "PensionerFile_pensionerId_idx")
}

model user {
  id                 Int                  @id @default(autoincrement())
  fullName           String
  email              String               @unique(map: "User_email_key")
  password           String
  phone              String?
  staffId            String?              @unique(map: "User_staffId_key")
  department         String?
  role               user_role
  createdAt          DateTime             @default(now())
  verificationreview verificationreview[]
}

model verificationlog {
  id          Int       @id @default(autoincrement())
  pensionerId Int
  method      String
  status      String
  verifiedAt  DateTime?
  nextDueAt   DateTime?
  pensioner   pensioner @relation(fields: [pensionerId], references: [id], map: "VerificationLog_pensionerId_fkey")

  @@index([pensionerId], map: "VerificationLog_pensionerId_idx")
}

model verificationreview {
  id            Int       @id @default(autoincrement())
  pensionerId   Int
  officerId     Int?
  capturedPhoto String
  status        String    @default("PENDING")
  reviewedAt    DateTime?
  user          user?     @relation(fields: [officerId], references: [id], map: "VerificationReview_officerId_fkey")
  pensioner     pensioner @relation(fields: [pensionerId], references: [id], map: "VerificationReview_pensionerId_fkey")

  @@index([officerId], map: "VerificationReview_officerId_idx")
  @@index([pensionerId], map: "VerificationReview_pensionerId_idx")
}

model biometriccredential {
  id           String    @id @default(cuid())
  pensionerId  Int
  type         String    // "FACE" | "FINGERPRINT"
  credentialId String
  publicKey    String    // JSON string of the credential data
  registeredAt DateTime  @default(now())
  pensioner    pensioner @relation(fields: [pensionerId], references: [id], map: "BiometricCredential_pensionerId_fkey")

  @@index([pensionerId], map: "BiometricCredential_pensionerId_idx")
}

enum user_role {
  ADMIN
  VERIFICATION_OFFICER
}
