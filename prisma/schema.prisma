generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VERIFICATION_OFFICER
}

// Staff users (Admin, Verification Officer)
model User {
  id         Int      @id @default(autoincrement())
  fullName   String
  email      String   @unique
  password   String
  phone      String?
  staffId    String?  @unique
  department String?
  role       Role
  createdAt  DateTime @default(now())
  verificationReviews VerificationReview[]
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("admin")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pensioner {
  id                     Int        @id @default(autoincrement())
  pensionId              String     @unique
  fullName               String
  nin                    String     @unique
  dateOfBirth            DateTime
  gender                 String
  email                  String     @unique
  phone                  String
  residentialAddress     String
  pensionSchemeType      String
  dateOfFirstAppointment DateTime
  dateOfRetirement       DateTime
  pfNumber               String     @unique
  lastPromotionDate      DateTime
  currentLevel           String
  salary                 Float
  expectedRetirementDate DateTime
  maidenName             String?
  password               String
  status                 String     @default("PENDING_VERIFICATION")
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  gratuityRate           Float?
  monthlyPension         Float?
  pensionRate            Float?
  totalGratuity          Float?
  yearsOfService         Int?
  photo                  String?
  documents              Document[]
  files                  PensionerFile[]
  verificationLogs       VerificationLog[]
  verificationReviews    VerificationReview[]
}

model Document {
  id           String    @id @default(cuid())
  pensionerId  Int
  documentType String
  fileName     String
  filePath     String
  uploadedAt   DateTime  @default(now())
  verifiedAt   DateTime?
  status       String    @default("pending")
  pensioner    Pensioner @relation(fields: [pensionerId], references: [id])
}

model PensionerFile {
  id            String    @id @default(cuid())
  pensionerId   Int
  fileType      String
  fileUrl       String
  originalName  String
  publicId      String
  uploadedById  Int?
  createdAt     DateTime  @default(now())

  pensioner     Pensioner @relation(fields: [pensionerId], references: [id])
}

model Enquiry {
  id         Int      @id @default(autoincrement())
  fullName   String
  email      String
  phone      String?
  subject    String
  message    String
  trackingId String   @unique
  createdAt  DateTime @default(now())
}

model VerificationLog {
  id           Int       @id @default(autoincrement())
  pensioner    Pensioner @relation(fields: [pensionerId], references: [id])
  pensionerId  Int
  method       String
  status       String
  verifiedAt   DateTime?
  nextDueAt    DateTime?
}

model VerificationReview {
  id            Int       @id @default(autoincrement())
  pensioner     Pensioner @relation(fields: [pensionerId], references: [id])
  pensionerId   Int
  officer       User?     @relation(fields: [officerId], references: [id])
  officerId     Int?
  capturedPhoto String
  status        String   @default("PENDING")
  reviewedAt    DateTime?
}
